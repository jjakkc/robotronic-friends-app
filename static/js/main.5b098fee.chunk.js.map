{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","react_default","a","createElement","className","src","concat","id","alt","name","email","CardList","_ref","robos","cardsArray","map","user","i","components_Card","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","height","border","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","Component","Header","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robo","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5b098fee.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Card(props){\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            {/* Robo pic generator from robohash.org. Using params after ?  to show monsters instead*/}\r\n            <img src={`https://robohash.org/${props.id}?size=200x200;set=set3`} alt=\"robo profile pic\" />\r\n            <div>\r\n                <h3>{ props.name }</h3>\r\n                <p>{ props.email }</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction CardList({robos}) {\r\n    const cardsArray = robos.map((user, i) => {\r\n        return  <Card key={robos[i].id} id={robos[i].id} name={robos[i].name} email={robos[i].email} />\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {cardsArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n                aria-label=\"Search Robots\"\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                placeholder=\"Search for robots...\" \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', height: '500px', border: '1px solid black'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Whoops. Something went wrong with this component.</h1>\r\n        } else {\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\n// import CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n\r\n// shouldComponentUpdate(nextProps, nextState){\r\n//     return false;\r\n// }\r\n\r\n    render(){\r\n        // Using this log to see how often Header is rendered\r\n        // console.log('Header');\r\n        return (\r\n            <div>\r\n                <h1 className=\"f1\">Robotronic Friends</h1>\r\n                <h4>Where Friends Are Made</h4>\r\n                {/* <CounterButton color={'red'} /> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport { connect } from 'react-redux';\r\nimport Header from '../components/Header';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        // state.<fromthereducer>.searchField\r\n        searchField: state.searchRobots.searchField,\r\n        // these are the states returned from reducer\r\n        robos: state.requestRobots.robos,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // in the event that the search input changes we dispatch the action setSearchField to change our searchField to the changed input value\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        // redux-thunk works on this dispatch because requestRobots() returns a function\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    // constructor() {\r\n    //     super()\r\n    //     this.state = {\r\n    //         robos : []\r\n    //         // searchfield : ''\r\n    //     }\r\n    // }\r\n\r\n    // this is a method of Component\r\n    componentDidMount(){\r\n        // fetch('https://jsonplaceholder.typicode.com/users')\r\n        //     .then(response => response.json())\r\n        //     .then(users => this.setState({robos : users}));\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    // previous onSearchChange(event) was changed because this keyword pointed to obj that called it instead of App.js\r\n    // onSearchChange = (event) => {\r\n    //     this.setState({searchfield : event.target.value});\r\n    // }\r\n    \r\n    render(){\r\n        // const {robos, searchfield} = this.state;\r\n        // const { robos } = this.state;\r\n        const { searchField, onSearchChange, robos, isPending } = this.props;\r\n        const filteredRobots = robos.filter(robo => {\r\n            return robo.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        // console.log(filteredRobots);\r\n        if(isPending){\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1>Loading</h1><span>...</span>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"tc\">\r\n                    {/* <h1 className=\"f1\">Robotronic Friends</h1> */}\r\n                    <Header />\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robos={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\n// \r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\n// searchRobots is the action thats taking place using searchfield\r\n// state=initialState is the default state that we're changing\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            // returning a new state that sets the searchField to the payload of the action\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robos: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            // Object.assign(empty obj, current state, new state)\r\n            return Object.assign({}, state, {isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robos: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\n// const logger = createLogger();\n// combines all reducers into one reducer\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n                <Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}